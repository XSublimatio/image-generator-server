{
  "version": 3,
  "sources": ["../../src/core/ImageBus.ts"],
  "sourcesContent": ["import prisma from '../lib/prisma';\nimport queueTs from 'queue-ts';\nimport { Queue } from '@prisma/client';\nimport { BigNumber } from 'ethers';\nimport { exec } from 'child_process';\nimport { getTokenFromId } from '@faction-nfts/xsublimatio-smart-contracts';\nimport { TypedEmitter } from 'tiny-typed-emitter';\n\ninterface IImageBus {\n  newImage: (tokenId: string, imagePath: string) => void;\n}\n\nclass ImageBus extends TypedEmitter<IImageBus> {\n  queue = new queueTs.Queue(1);\n\n  constructor() {\n    super();\n\n    this.addToQueue = this.addToQueue.bind(this);\n  }\n\n  public async start() {\n    const queueItems = (await prisma.queue.findMany()) || [];\n    queueItems.forEach(this.addToQueue);\n  }\n\n  public feedNewQueueItem(queueItem: Queue) {\n    this.addToQueue(queueItem);\n  }\n\n  private addToQueue(queueItem: Queue) {\n    this.queue.add(() => this.createImg(queueItem));\n  }\n\n  private async createImg(queueItem: Queue) {\n    const bnTokenId = BigNumber.from(queueItem.tokenId);\n    const token = getTokenFromId(bnTokenId);\n    const processedMoleculeName = processName(token.name);\n\n    try {\n      await exec(`\n        ${process.env.PWD}/img-generator/main --seed=${token.seed} --molecule=${processedMoleculeName} --filename=${queueItem.tokenId} --sync\n      `);\n\n      this.emit(\n        'newImage',\n        queueItem.tokenId,\n        `${process.env.PWD}/build/output/${queueItem.tokenId}.png`,\n      );\n    } catch (e) {\n      prisma.queue.update({\n        where: { id: queueItem.id },\n        data: { failed: true },\n      });\n    }\n  }\n}\n\nexport default ImageBus;\n\n//TODO: This does not account for drug names, as they've not been included in the generator.\nconst processName = (name: string) => name.toLowerCase().replace('-', '').split(' ')[0];\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAmB;AACnB,sBAAoB;AAEpB,oBAA0B;AAC1B,2BAAqB;AACrB,yCAA+B;AAC/B,gCAA6B;AAM7B,uBAAuB,uCAAwB;AAAA,EAG7C,cAAc;AACZ;AAHF,iBAAQ,IAAI,wBAAQ,MAAM;AAKxB,SAAK,aAAa,KAAK,WAAW,KAAK;AAAA;AAAA,EAG5B,QAAQ;AAAA;AACnB,YAAM,aAAc,OAAM,sBAAO,MAAM,eAAe;AACtD,iBAAW,QAAQ,KAAK;AAAA;AAAA;AAAA,EAGnB,iBAAiB,WAAkB;AACxC,SAAK,WAAW;AAAA;AAAA,EAGV,WAAW,WAAkB;AACnC,SAAK,MAAM,IAAI,MAAM,KAAK,UAAU;AAAA;AAAA,EAGxB,UAAU,WAAkB;AAAA;AACxC,YAAM,YAAY,wBAAU,KAAK,UAAU;AAC3C,YAAM,QAAQ,uDAAe;AAC7B,YAAM,wBAAwB,YAAY,MAAM;AAEhD,UAAI;AACF,cAAM,+BAAK;AAAA,UACP,QAAQ,IAAI,iCAAiC,MAAM,mBAAmB,oCAAoC,UAAU;AAAA;AAGxH,aAAK,KACH,YACA,UAAU,SACV,GAAG,QAAQ,IAAI,oBAAoB,UAAU;AAAA,eAExC,GAAP;AACA,8BAAO,MAAM,OAAO;AAAA,UAClB,OAAO,EAAE,IAAI,UAAU;AAAA,UACvB,MAAM,EAAE,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAMxB,IAAO,mBAAQ;AAGf,MAAM,cAAc,CAAC,SAAiB,KAAK,cAAc,QAAQ,KAAK,IAAI,MAAM,KAAK;",
  "names": []
}
