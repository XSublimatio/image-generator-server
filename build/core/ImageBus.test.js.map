{
  "version": 3,
  "sources": ["../../src/core/ImageBus.test.ts"],
  "sourcesContent": ["import tap from 'tap';\nimport QueueItemBus from '../core/QueueItemBus';\nimport prisma, { destroyPrismaTest, startPrismaTest } from '../lib/prisma';\nimport ImageBus from './ImageBus';\nimport { Queue } from '@prisma/client';\n\nlet queueItemBus: QueueItemBus;\nlet imageBus: ImageBus;\nlet feedNewQueueItem: (queueItem: Queue) => void;\n\ntap.test('Test onNewQueueItem', (t) => {\n  t.before(async () => {\n    await startPrismaTest();\n    queueItemBus = new QueueItemBus();\n    imageBus = new ImageBus();\n    feedNewQueueItem = (queueItem) => imageBus.feedNewQueueItem(queueItem);\n\n    queueItemBus.on('newQueueItem', feedNewQueueItem);\n  });\n  t.teardown(async () => {\n    queueItemBus.off('newQueueItem', feedNewQueueItem);\n    await destroyPrismaTest();\n  });\n  t.plan(1);\n  t.test('Should return hello world', async (t) => {\n    const tokenId = '1223321123';\n    await prisma.queue.create({ data: { tokenId } });\n\n    imageBus.on('newImage', (receivedTokenId, imagePath) => {\n      t.equal(tokenId, receivedTokenId);\n      t.equal(`${process.env.PWD}/main/application.linux64/${tokenId}.png`, imagePath);\n    });\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAAgB;AAChB,0BAAyB;AACzB,oBAA2D;AAC3D,sBAAqB;AAGrB,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ,mBAAI,KAAK,uBAAuB,CAAC,MAAM;AACrC,IAAE,OAAO,MAAY;AACnB,UAAM;AACN,mBAAe,IAAI;AACnB,eAAW,IAAI;AACf,uBAAmB,CAAC,cAAc,SAAS,iBAAiB;AAE5D,iBAAa,GAAG,gBAAgB;AAAA;AAElC,IAAE,SAAS,MAAY;AACrB,iBAAa,IAAI,gBAAgB;AACjC,UAAM;AAAA;AAER,IAAE,KAAK;AACP,IAAE,KAAK,6BAA6B,CAAO,OAAM;AAC/C,UAAM,UAAU;AAChB,UAAM,sBAAO,MAAM,OAAO,EAAE,MAAM,EAAE;AAEpC,aAAS,GAAG,YAAY,CAAC,iBAAiB,cAAc;AACtD,SAAE,MAAM,SAAS;AACjB,SAAE,MAAM,GAAG,QAAQ,IAAI,gCAAgC,eAAe;AAAA;AAAA;AAAA;",
  "names": []
}
