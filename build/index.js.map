{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import path from 'path';\n\nimport fastify from 'fastify';\nimport now from 'fastify-now';\nimport startCore from './core';\n\n// Load env vars\nimport loadConfig from './lib/config';\nloadConfig();\n\nexport async function createServer() {\n  const server = fastify({\n    logger: {\n      level: process.env.LOG_LEVEL,\n    },\n  });\n\n  server.register(now, {\n    routesFolder: path.join(__dirname, './routes'),\n  });\n\n  await server.ready();\n  return server;\n}\n\nexport async function startServer() {\n  process.on('unhandledRejection', (err) => {\n    console.error(err);\n    process.exit(1);\n  });\n\n  const server = await createServer();\n  await server.listen(+process.env.API_PORT, process.env.API_HOST);\n\n  for (const signal of ['SIGINT', 'SIGTERM']) {\n    process.on(signal, () =>\n      server.close().then((err) => {\n        console.log(`close application on ${signal}`);\n        process.exit(err ? 1 : 0);\n      }),\n    );\n  }\n}\n\nif (process.env.NODE_ENV !== 'test') {\n  startServer();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiB;AAEjB,qBAAoB;AACpB,yBAAgB;AAIhB,oBAAuB;AACvB;AAEA,wBAAqC;AAAA;AACnC,UAAM,SAAS,4BAAQ;AAAA,MACrB,QAAQ;AAAA,QACN,OAAO,QAAQ,IAAI;AAAA;AAAA;AAIvB,WAAO,SAAS,4BAAK;AAAA,MACnB,cAAc,oBAAK,KAAK,WAAW;AAAA;AAGrC,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAGT,uBAAoC;AAAA;AAClC,YAAQ,GAAG,sBAAsB,CAAC,QAAQ;AACxC,cAAQ,MAAM;AACd,cAAQ,KAAK;AAAA;AAGf,UAAM,SAAS,MAAM;AACrB,UAAM,OAAO,OAAO,CAAC,QAAQ,IAAI,UAAU,QAAQ,IAAI;AAEvD,eAAW,UAAU,CAAC,UAAU,YAAY;AAC1C,cAAQ,GAAG,QAAQ,MACjB,OAAO,QAAQ,KAAK,CAAC,QAAQ;AAC3B,gBAAQ,IAAI,wBAAwB;AACpC,gBAAQ,KAAK,MAAM,IAAI;AAAA;AAAA;AAAA;AAAA;AAM/B,IAAI,QAAQ,IAAI,aAAa,QAAQ;AACnC;AAAA;",
  "names": []
}
